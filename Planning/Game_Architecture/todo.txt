overhauled user prompt box has just been completed as has the back functionality.

So the dialogue box on the bottom right tells the moves as they are happening. Including failures and crit notifs.
This needs to be linked in with signals from the ends of animations too...

The move itself should have a get_attack_string(user_name, target_name, critical, success) method that returns 
a string to be fed to the dialogue box.

when updating the dialogue box, we will get the current string and then add the new string to the front with a few
newlines in between and set that as the new text. We will probably also have to put this label inside a vertical
scrolling container






Dialogue box basically done:
	next
*done*		--- *Add attack, magic, (handiness? prolly just uses magic), defense, and magic-defense stats to the battle system.
*done*			*Add mechanic class with some healing spells
*done*			*Create moves that utilize these stats. I think it would be good to put the "calculate_move_damage"
*done*			methods on the base move. We could have different ones for offensive_magic, defensive_magic, healing magic, 
*done*			melee, long_range
*done*			*each method will take a user, a target, and the success_roll. It will use the relevant stats from each one 
*done*			to calculate the appropriate damage and determine if the success roll was high enough. it will return a 
*done*			dictionary of form:
*done*
*done*			var move_result = {
*done*				move_string: "",
*done*				damage_output: 90,
*done*			}
*done*
*done*				it could just apply the move to the target itself. however, this would make it hard to handle animations and all.
*done*
*done*		--- Add generate_announcement_string() to Moves
*done*				It would be cool if this had a large pool of randomized phrases about how great, mediocre, or bad
*done*				a move was. Maybe chatGPT generated. A huge list.



------------------------------------------------------------------------------------------------------------------------------
|----------
|*done*	--- Figure out a good way to keep health and boost values locked to integers. This will require planning out
|			how to use stats in combat. This will likely help this vvvv situation
| 				base_hp = 250
| 				base_attack = 20
| 				base_defense = 15
| 				weapon_bonus = 10
| 				armor_bonus = 15
| 				base_power = 90
| 
| 				total_attack = (attack + weapon_bonus) = 30
| 				total_defense = (defense + armor_bonus) + (armor_bonus if crit) = 30 or 45
| 				damage_output = (total_attack + base_power) + (weapon_bonus if crit) = 120 or 130
| 				damage_incurred = (damage_output - total_defense) = 90, 100, 75, or 85
|
|
|		--- Get the bars to lerp. maybe there is a "real_value" and a "displayed_value" on the fighter_hud for each bar.
|			in the _process() method, the "displayed_value" is always lerping toward the "real_value"
|				Maybe for this, there is a "health_tick_timer". The length of the timer is determined by the vitality stat.
|				A higher vitality means that the timer is longer. (maybe time = vitality * .1 (or .01))
|				Each timeout signal, the health is decreased by 1 until target_health == current_health
| 				There's an issue here with healing. That shouldn't be negatively affected by good vitality.
|
|*done* --- Do we check for health being over the max health during a heal? Check this when receiving a healing move.
|----------


|----------
|*done*	--- Add more values to the move_info object. so we can pass just that to all of these methods
|				if the "stolen_item" key is not set, that means that stealing wasn't attempted.
|				This way, the receive_move method is able to set the string. So it can be unique.
|*done*	--- MoveInfo should have a constructor which is just a function that returns the full dictionary with defaults set
|
|*done*	--- Move the generate_announcement method off of the announcement box and put it on the moves. it will take move_info
|				For this chatgpt prompt, "Tell me a sentence describing sally hitting bob and stealing her keys."
|				Run this for each move to get a bank of formula sentences that we put user & target into
|
|*done* --- Add Monk class
|
|		--- Add Dragoon Class
|
|		--- Start thinking about BlueMage class
|
|----------



		--- Write documentation for the BattleEngine so that I can understand it a month from now.

I think, magic learned while using a class weapon is retained when you don't have the weapon equipped
	but it is much less powerful and much less boost efficient might be cool. So it's still useable.


I think I'm gonna make blue mage more intuitive. There's gonna be some sort of pokedex type of thing for 
learnable moves. So when you see a learnable move is used, you get a notification that it is learnable
and your move_dex is updated. When you look through your move dex, you can see all the moves you've seen
with the monsters that can learn them. Maybe there could be a move dex and a monster dex.
